<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Validation\Rule;
class UpdatetaskRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array|string>
     */
    public function rules(): array
    {
        return [
            //
            'description' => 'sometimes|required|string|min:10',
            'name' => 'sometimes|required|string',
            'type' => 'sometimes|required|string',
            'startDate' => 'sometimes|required|date',
            'endDate' => 'sometimes|required|date|after_or_equal:startDate',
            'status' => Rule::in(['not_started', 'in_progress', 'completed']),
            'priority' => 'sometimes|numeric|min:1',
            'release' => 'sometimes|string',
            'product_manager' => 'sometimes|nullable|exists:users,id',
            'employee' => 'sometimes|nullable|exists:users,id',
        ];
    }
    ## add new function failed validation
    public  function  failedValidation(Validator $validator)
    {
//        parent::failedValidation($validator); // TODO: Change the autogenerated stub
        throw  new HttpResponseException(
            response()->json([
            'success'=>false,
            "message"=>"validation errors",
            "data"=> $validator->errors()
            ],
            400

        ));
    }
}
